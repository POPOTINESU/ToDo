// Code generated by MockGen. DO NOT EDIT.
// Source: tx_manager.go
//
// Generated by this command:
//
//	mockgen -source=tx_manager.go -typed=true -destination=./mocks/tx_manager_mock.go
//

// Package mock_pkg is a generated GoMock package.
package mock_pkg

import (
	pkg "ToDo/pkg"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
	isgomock struct{}
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *MockTxCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
	return &MockTxCommitCall{Call: call}
}

// MockTxCommitCall wrap *gomock.Call
type MockTxCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxCommitCall) Return(arg0 error) *MockTxCommitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxCommitCall) Do(f func() error) *MockTxCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxCommitCall) DoAndReturn(f func() error) *MockTxCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxMockRecorder) Rollback() *MockTxRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
	return &MockTxRollbackCall{Call: call}
}

// MockTxRollbackCall wrap *gomock.Call
type MockTxRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxRollbackCall) Return(arg0 error) *MockTxRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxRollbackCall) Do(f func() error) *MockTxRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxRollbackCall) DoAndReturn(f func() error) *MockTxRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager[T pkg.Tx] struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder[T]
	isgomock struct{}
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder[T pkg.Tx] struct {
	mock *MockTxManager[T]
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager[T pkg.Tx](ctrl *gomock.Controller) *MockTxManager[T] {
	mock := &MockTxManager[T]{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager[T]) EXPECT() *MockTxManagerMockRecorder[T] {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTxManager[T]) Begin(ctx context.Context) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockTxManagerMockRecorder[T]) Begin(ctx any) *MockTxManagerBeginCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTxManager[T])(nil).Begin), ctx)
	return &MockTxManagerBeginCall[T]{Call: call}
}

// MockTxManagerBeginCall wrap *gomock.Call
type MockTxManagerBeginCall[T pkg.Tx] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTxManagerBeginCall[T]) Return(arg0 T, arg1 error) *MockTxManagerBeginCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTxManagerBeginCall[T]) Do(f func(context.Context) (T, error)) *MockTxManagerBeginCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTxManagerBeginCall[T]) DoAndReturn(f func(context.Context) (T, error)) *MockTxManagerBeginCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
